'''
3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
в котором ключи — первые буквы имен, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. Например:
thesaurus("Иван", "Мария", "Петр", "Илья")
{
    "И": ["Иван", "Илья"],
    "М": ["Мария"], "П": ["Петр"]
}
Подумайте: полезен ли будет вам оператор распаковки? Сможете ли вы вернуть отсортированный по ключам словарь?

4. * (вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате
«Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные
по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы.
Например:
thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
{
    "А": {
        "П": "Петр Алексеев"
    },
    "С": {
        "И": ["Иван Сергеев", "Инна Серова"],
        "А": ["Анна Савельева"]
    }
}
Сможете ли вы вернуть отсортированный по ключам словарь?
'''

def thesaurus(*names):
    my_name = dict()
    for item in names:
        my_name.setdefault(item[:1], []).append(item)
    return my_name

def thesaurus_adv(*fio_list):
    my_fio = dict()
    for item in fio_list:
        my_fio.setdefault(item.split()[1][:1], []).append(item)

    for key, fio in my_fio.items():
        my_fio[key] = thesaurus(*fio)

    return my_fio

print(thesaurus("Иван", "Мария", "Петр", "Илья", "Михаил", "Игорь", "Ирина", "Павел", "Полина"))
print(thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева", "Павел Андреев", "Ирина Аникеева", "Инна Алексеева", "Мария Александрова"))
